local HttpService = game:GetService("HttpService")

local Roact = require(script.Parent.Parent.Parent.Libraries.Roact)

function print_table(node)
    local cache, stack, output = {},{},{}
    local depth = 1
    local output_str = "{\n"

    while true do
        local size = 0
        for k,v in pairs(node) do
            size = size + 1
        end

        local cur_index = 1
        for k,v in pairs(node) do
            if (cache[node] == nil) or (cur_index >= cache[node]) then

                if (string.find(output_str,"}",output_str:len())) then
                    output_str = output_str .. ",\n"
                elseif not (string.find(output_str,"\n",output_str:len())) then
                    output_str = output_str .. "\n"
                end

                -- This is necessary for working with HUGE tables otherwise we run out of memory using concat on huge strings
                table.insert(output,output_str)
                output_str = ""

                local key
                if (type(k) == "number" or type(k) == "boolean") then
                    key = "["..tostring(k).."]"
                else
                    key = "['"..tostring(k).."']"
                end

                if (type(v) == "number" or type(v) == "boolean") then
                    output_str = output_str .. string.rep('\t',depth) .. key .. " = "..tostring(v)
                elseif (type(v) == "table") then
                    output_str = output_str .. string.rep('\t',depth) .. key .. " = {\n"
                    table.insert(stack,node)
                    table.insert(stack,v)
                    cache[node] = cur_index+1
                    break
                else
                    output_str = output_str .. string.rep('\t',depth) .. key .. " = '"..tostring(v).."'"
                end

                if (cur_index == size) then
                    output_str = output_str .. "\n" .. string.rep('\t',depth-1) .. "}"
                else
                    output_str = output_str .. ","
                end
            else
                -- close the table
                if (cur_index == size) then
                    output_str = output_str .. "\n" .. string.rep('\t',depth-1) .. "}"
                end
            end

            cur_index = cur_index + 1
        end

        if (size == 0) then
            output_str = output_str .. "\n" .. string.rep('\t',depth-1) .. "}"
        end

        if (#stack > 0) then
            node = stack[#stack]
            stack[#stack] = nil
            depth = cache[node] == nil and depth + 1 or depth - 1
        else
            break
        end
    end

    -- This is necessary for working with HUGE tables otherwise we run out of memory using concat on huge strings
    table.insert(output,output_str)
    output_str = table.concat(output)

    return output_str
end

local function ConvertButton(props)
	return Roact.createElement("TextButton", {
		Size = UDim2.fromScale(0.75, 0.15),
		Position = UDim2.fromScale(0.5, 0.825),
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Color3.fromRGB(76, 77, 76),
		BorderColor3 = Color3.fromRGB(76, 77, 76),
		TextColor3 = Color3.fromRGB(184, 182, 182),
		Font = Enum.Font.Gotham,
		FontSize = Enum.FontSize.Size14,
		Text = "Convert!",

		[Roact.Event.MouseButton1Click] = function(element)
			local Input = element.Parent.Input.Text
			local Output

			local success, message = pcall(function()
				Output = HttpService:JSONDecode(Input)
			end)	
			
			if not success then
				warn(message)
				element.Parent.Message = message
				return
			end		

			local OutputScript = Instance.new("ModuleScript")
			OutputScript.Parent = game.ReplicatedStorage
			OutputScript.Name = "Output"
			OutputScript.Source = "-- generated by ConvertJSON\nreturn "..tostring(print_table(Output))
			
			print('generated output script in '..OutputScript.Parent.Name)
			element.Parent.Message.Text = "generated output script in "..OutputScript.Parent.Name
		end
	})
end

return ConvertButton